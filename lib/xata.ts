// Generated by Xata Codegen 0.23.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "issues",
    columns: [
      { name: "title", type: "string" },
      { name: "description", type: "string" },
      { name: "markdown", type: "text" },
      {
        name: "board_id",
        type: "link",
        link: { table: "boards" },
        unique: true,
      },
    ],
  },
  {
    name: "boards",
    columns: [
      { name: "issue", type: "link", link: { table: "issues" }, unique: true },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Issues = InferredTypes["issues"];
export type IssuesRecord = Issues & XataRecord;

export type Boards = InferredTypes["boards"];
export type BoardsRecord = Boards & XataRecord;

export type DatabaseSchema = {
  issues: IssuesRecord;
  boards: BoardsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://MarcellusCodes-s-workspace-7clu2k.eu-west-1.xata.sh/db/logissues",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
